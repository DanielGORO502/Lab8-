/*******************************************************************************
 * File:   main.c
 * Author: Daniel González 
 *
 * Created on 20 de abril de 2021, 07:10 PM
 */

// CONFIG1
#pragma config FOSC = INTRC_NOCLKOUT// Oscillator Selection bits (INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)
#pragma config CP = ON          // Code Protection bit (Program memory code protection is enabled)
#pragma config CPD = ON         // Data Code Protection bit (Data memory code protection is enabled)
#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)
#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)
#pragma config LVP = ON         // Low Voltage Programming Enable bit (RB3/PGM pin has PGM function, low voltage programming enabled)

// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.


//******************************************************************************
//Importación de librerias
//******************************************************************************

#include <xc.h>
#include <stdint.h>             // Estandar y otros

#define _XTAL_FREQ 4000000      //Frecuencia de reloj a utilizar

//******************************************************************************
//Declaración de Variable
//******************************************************************************

unsigned char var1;
unsigned char V;
unsigned char uni, dec, cent;
unsigned char Suitw;

//******************************************************************************
//Prototipo de funciones
//******************************************************************************

void Setup(void);       // Llamamos las configuraciones de los pines 
int  Tabla(int var1);    // Llamamos la funcion tabla
void conv_dec(void);//  Llamamos la funcion de conversion a decimales 

//******************************************************************************
//Funcion de Interrupcion 
//******************************************************************************

void __interrupt() isr(void){
    
//****************************** TMR0 ****************************************** 
    
    if(T0IF == 1) {       //Verificamos si la bandera del TMR0 es 1
        TMR0  = 236;      //Colocamos el valor a TMR0 para que funcione la interrupcion cada 5ms
        T0IF  = 0;        //Reiniciamos la bandera del TMR0
        PORTE = 0x00;     //Encendemos el Puerto E
        if(Suitw == 0){       //Verificamos la variable para poder realizar el suicheo 
            var1    = uni;   //Movemos el valor de la variable unidad a V
            PORTC = Tabla(var1);//Movemos el valor de la tabla a PORTD
            RE0   = 1;        //Volvemos 0 el pin del puerto E
            Suitw = 1;        //Cambiamos el valor de Suitw para poder controlar el suicheo 
            return;
        }    
        if(Suitw == 1){
            var1    = dec;
            PORTC = Tabla(var1);
            RE1   = 1;
            Suitw = 2;
            return;
        }    
        if(Suitw == 2){
            var1    = cent;
            PORTC = Tabla(var1);
            RE2   = 1;
            Suitw = 0;
            return;
        }
    }
//*************************** Interrupcion ADC *********************************
    
    if(ADIF == 1){               //Verificamos si la bandera del ADC se activa
        if(ADCON0bits.CHS == 0){ //Verificamos si el pin esta precionado 
            PORTD = ADRESH;      //Metemos el valor convertido a la variable 
        }
        else{                   //Verifica el canal 0 
            V = ADRESH;         //Metemos el valor convertido a la variable
        }
        ADIF = 0;               //Se limpia la bandera ADC
    }
}
//******************************************************************************
//Main
//******************************************************************************

void main(void){
    Setup();
    __delay_us(50);
    ADCON0bits.GO = 1;
    while(1){
     conv_dec();
     if(ADCON0bits.GO == 0){ 
         if (ADCON0bits.CHS == 0){
             ADCON0bits.CHS = 1;
         }
         else{
             ADCON0bits.CHS = 0;
         }
         __delay_us(50);
         ADCON0bits.GO = 1;
     }
   }
     
}
//*************************** Valores Display **********************************
int Tabla(int var1){
    int w;
    switch (var1){
        case 0:
        w = 0b00111111;
        break;
        case 1:
        w = 0b00000110;
        break;
        case 2:
        w = 0b01011011;
        break;
        case 3:
        w = 0b01001111;
        break;
        case 4:
        w = 0b01100110;
        break;
        case 5:
        w = 0b01101101;
        break;
        case 6:
        w = 0b01111101;
        break;
        case 7:
        w = 0b00000111;
        break;
        case 8:
        w = 0b01111111;
        break;
        case 9:
        w = 0b01101111;
        break;
        default:
        w = 0;    
    }
    return w;
}
//*************************** Función de división ******************************

void conv_dec(void){
     cent = (V/100);   //Realizamos la operacion para encontrar la centana 
     dec = (V - cent*100)/10;//Realizamos la operacion para encontrar la decena 
     uni = (V - cent*100 - dec*10)/1;//Realizamos la operacion para encontrar la unidad
     return;
}
//******************************************************************************
// Funcion de configuraciones
//******************************************************************************

void Setup(void){
//********************* Configuración de entradas y salidas ********************
    ANSEL  = 0b00000011;    // Configuracion a pines Digitales 
                //Configuracion para pines como salidas o entradas 
    TRISC = 0x00;
    TRISD = 0x00;
    TRISE = 0x00;
    TRISA = 0b00000011;
                //Limpiamos todos los puertos 
    PORTC = 0x00;
    PORTD = 0x00;
    PORTE = 0x00;
    PORTA = 0x00;
//*********************** Configuración del Reloj a 4MHZ ***********************
    OSCCONbits.IRCF2 = 1;
    OSCCONbits.IRCF1 = 1;
    OSCCONbits.IRCF0 = 0;
    OSCCONbits.SCS   = 1;
 //************************* Configuración del ADC *****************************
    ADCON1bits.ADFM  = 0;       //A la izquierda
    ADCON1bits.VCFG0 = 0;       //Voltaje de referencia 
    ADCON1bits.VCFG1 = 0;       //Voltaje de referencia
    
    ADCON0bits.ADCS  = 1;       //Selecionamos el timpo de reloj         
    ADCON0bits.CHS   = 0;       //Para comenzar con el canal que se utilizara
    __delay_us(100);            //Para que tenga un delay de carga 
    ADCON0bits.ADON  = 1;       //Encendemos el modulo 
    __delay_us(50);             //Delay para que el modulo procese
//************************** Configuración del TMR0 ****************************
    OPTION_REGbits.T0CS = 0;
    OPTION_REGbits.PSA  = 0;
    OPTION_REGbits.PS2  = 1;
    OPTION_REGbits.PS1  = 1;
    OPTION_REGbits.PS0  = 1;
//********************** Configuración de Interrupciones ***********************
   INTCONbits.GIE = 1;      //Habilitación de interrupciones globales
   INTCONbits.PEIE = 1;     //Interrupcion por perifericos
   INTCONbits.T0IE = 1;     //Se habilita el int TMR0
   INTCONbits.TMR0IF = 0;   //Para apagar la bandera del TMR0
   INTCONbits.TMR0IE = 1;   //Bit del INTONCHANGE
   INTCONbits.RBIF = 0;     //Apaga la bandera de IntOnChange 
   
   PIE1bits.ADIE = 1;       //Se prende Interrup por ADC 
   PIR1bits.ADIF = 0;       //Baja la bandera de conversion 
}
     
